#!/bin/bash

while getopts ":u:a:s:e:c:d:o:p:" q; do
    case "${q}" in
        u) u=${OPTARG} ;;
        a) a=${OPTARG} ;;
        s) s=${OPTARG} ;;
        e) e=${OPTARG} ;;
        c) c=${OPTARG} ;;
        d) d=${OPTARG} ;;
        o) o=${OPTARG} ;;
        p) p=${OPTARG} ;;
        *) usage ;;
    esac
done

# echo "u = ${u}" #u - rancher url
# echo "a = ${a}" #a - rancher access
# echo "s = ${s}" #s - rancher secret
# echo "e = ${e}" #e - Endpoint
# echo "c = ${c}" #c - ContainerName
# echo "d = ${d}" #d - databasename
# echo "o = ${o}" #o - overwrite
# echo "p = ${p}" #p - password

# Update Rancher vars if set
if [[ -n "${u}" && -n "${a}" && -n "${s}" ]]
then
    export RANCHER_URL=${u}
    export RANCHER_ACCESS_KEY=${a}
    export RANCHER_SECRET_KEY=${s}
fi

# Set overrite to false unless set to 'true'
if [ "${o}" != "true" ]
then
  o='false'
fi

# Asign end point url if only a container id was sent in.
if ([ -n "${e}" ])
then
    e='http://'$c':8529'
fi

backupdir=/internal/backup/${c}
echo $backupdir
mkdir -p $backupdir/temp

# create dump of database
if [[ -n "${p}" ]]
then
    /usr/bin/arangodump --server.password ${p} --server.database ${d} --output-directory /internal/backup/${d}/temp --server.endpoint ${e} --overwrite ${o} --include-system-collections true
else
    /usr/bin/arangodump --server.authentication false --server.database ${d} --output-directory /internal/backup/${d}/temp --server.endpoint ${e} --overwrite ${o} --include-system-collections true
fi

timestamp="$(date +"%Y%m%d_%H%M%S")"
tar -zcvf $backupdir/${d}-$timestamp-data.tar $backupdir/temp